// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/calculator.proto

package calculatorpbconnect

import (
	proto "calculator/proto"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CalculatorServiceName is the fully-qualified name of the CalculatorService service.
	CalculatorServiceName = "calculator.CalculatorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CalculatorServiceCalculateProcedure is the fully-qualified name of the CalculatorService's
	// Calculate RPC.
	CalculatorServiceCalculateProcedure = "/calculator.CalculatorService/Calculate"
)

// CalculatorServiceClient is a client for the calculator.CalculatorService service.
type CalculatorServiceClient interface {
	// 执行二元运算
	Calculate(context.Context, *connect.Request[proto.CalculateRequest]) (*connect.Response[proto.CalculateResponse], error)
}

// NewCalculatorServiceClient constructs a client for the calculator.CalculatorService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCalculatorServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CalculatorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	calculatorServiceMethods := proto.File_proto_calculator_proto.Services().ByName("CalculatorService").Methods()
	return &calculatorServiceClient{
		calculate: connect.NewClient[proto.CalculateRequest, proto.CalculateResponse](
			httpClient,
			baseURL+CalculatorServiceCalculateProcedure,
			connect.WithSchema(calculatorServiceMethods.ByName("Calculate")),
			connect.WithClientOptions(opts...),
		),
	}
}

// calculatorServiceClient implements CalculatorServiceClient.
type calculatorServiceClient struct {
	calculate *connect.Client[proto.CalculateRequest, proto.CalculateResponse]
}

// Calculate calls calculator.CalculatorService.Calculate.
func (c *calculatorServiceClient) Calculate(ctx context.Context, req *connect.Request[proto.CalculateRequest]) (*connect.Response[proto.CalculateResponse], error) {
	return c.calculate.CallUnary(ctx, req)
}

// CalculatorServiceHandler is an implementation of the calculator.CalculatorService service.
type CalculatorServiceHandler interface {
	// 执行二元运算
	Calculate(context.Context, *connect.Request[proto.CalculateRequest]) (*connect.Response[proto.CalculateResponse], error)
}

// NewCalculatorServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCalculatorServiceHandler(svc CalculatorServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	calculatorServiceMethods := proto.File_proto_calculator_proto.Services().ByName("CalculatorService").Methods()
	calculatorServiceCalculateHandler := connect.NewUnaryHandler(
		CalculatorServiceCalculateProcedure,
		svc.Calculate,
		connect.WithSchema(calculatorServiceMethods.ByName("Calculate")),
		connect.WithHandlerOptions(opts...),
	)
	return "/calculator.CalculatorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CalculatorServiceCalculateProcedure:
			calculatorServiceCalculateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCalculatorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCalculatorServiceHandler struct{}

func (UnimplementedCalculatorServiceHandler) Calculate(context.Context, *connect.Request[proto.CalculateRequest]) (*connect.Response[proto.CalculateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("calculator.CalculatorService.Calculate is not implemented"))
}
